C51 COMPILER V9.60.0.0   MAIN                                                              03/16/2025 14:12:06 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil5-1\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <main.H>
   2          #include <onewire.H>
   3          #include <ds1302.H>
   4          void clock_tast()
   5          {
   6   1        if(++key_tt == 10) {key_tt = 0;key_scan();}
   7   1        if(++show_tt == 20) {show_tt = 0;show_ref = 1;}
   8   1        if(++temp_tt == 450) {temp_tt = 0;temp_ref = 1;}
   9   1        if(++time_tt == 500) {time_tt = 0;time_ref = 1;}
  10   1        if(++led_tt%200 == 0) {led_ref = 1;}
  11   1        if(++pwm_tt == 500) {pwm_tt = 0;pwm_ref = 1;}
  12   1      }
  13          void main()
  14          {
  15   1        all_init();
  16   1        delay_ms(1);
  17   1        temp_get();delay_ms(850);
  18   1        temp_val = temp_get()*625;
  19   1        Timer0_Init();
  20   1         Timer1_Init();
  21   1        time_init();time_get();
  22   1        while(1)
  23   1        {
  24   2          if(show_ref == 1)
  25   2          {
  26   3            show_ref = 0;
  27   3            show_tast();
  28   3          }
  29   2          if(key_flag == 1)
  30   2          {
  31   3            key_flag = 0;
  32   3            key_tast();
  33   3          }
  34   2          if(temp_ref == 1)
  35   2          {
  36   3            temp_ref = 0;
  37   3            temp_val = temp_get()*625;
  38   3          }
  39   2          if(time_ref == 1)
  40   2          {
  41   3            time_ref = 0;
  42   3            time_get();
  43   3          }
  44   2          if(((time2[0]>=time3[0])&&(time2[0]<=time3[0]+5))&&(time2[1]==time3[1])&&(time2[2]==time3[2]))
  45   2          {
  46   3            if(led_ref == 1)
  47   3            {
  48   4              led_ref = 0;
  49   4              if(led_flag == 1) {led_flag = 0;ledx_on(1);}
  50   4              else if(led_flag == 0) {led_flag = 1;ledx_off(1);}
  51   4            }
  52   3            if(led_tt >=5001) {ledx_off(1);}
  53   3          }
  54   2          
C51 COMPILER V9.60.0.0   MAIN                                                              03/16/2025 14:12:06 PAGE 2   

  55   2          if(pwm_ref == 1)
  56   2          {
  57   3            pwm_ref = 0;
  58   3            buty = (zheng_now*100)/(zheng_now+fan_now);
  59   3            pwm_time = zheng_now+fan_now;
  60   3            freq = 100000/pwm_time;
  61   3            
  62   3            seg_bit[0] = buty/10;
  63   3            seg_bit[1] = buty%10;
  64   3            seg_bit[2] = 20;
  65   3            seg_bit[3] = 20;
  66   3            seg_bit[4] = freq/1000;
  67   3            seg_bit[5] = freq%1000/100;
  68   3            seg_bit[6] = freq%100/10;
  69   3            seg_bit[7] = freq%10;
  70   3          }
  71   2        }
  72   1      }
  73          
  74          void time5 () interrupt 3
  75          {
  76   1        if(P34==1)
  77   1        {
  78   2          zheng++;
  79   2          if(buty_flag==1)
  80   2          {
  81   3            buty_flag=0;
  82   3            fan_now=fan;
  83   3            fan=0;
  84   3          }
  85   2        }
  86   1        else if(P34==0)
  87   1        {
  88   2          fan++;
  89   2          if(buty_flag==0)
  90   2          {
  91   3            buty_flag=1;
  92   3            zheng_now=zheng;
  93   3            zheng=0;
  94   3          }
  95   2        }
  96   1      }
  97          
  98          
  99          void show_tast()
 100          {
 101   1        switch(show_state)
 102   1        {
 103   2          case 1:
 104   2          {
 105   3            seg_bit[0] = time2[2]/10;
 106   3            seg_bit[1] = time2[2]%10;
 107   3            seg_bit[2] = 21;
 108   3            seg_bit[3] = time2[1]/10;
 109   3            seg_bit[4] = time2[1]%10;
 110   3            seg_bit[5] = 21;
 111   3            seg_bit[6] = time2[0]/10;
 112   3            seg_bit[7] = time2[0]%10;
 113   3            if((time2[0]%2 == 0)&&flash_bit)
 114   3              {
 115   4                seg_bit[flash_pos_bit [flash_pos]/10] = 20;
 116   4                seg_bit[flash_pos_bit [flash_pos]%10] = 20;
C51 COMPILER V9.60.0.0   MAIN                                                              03/16/2025 14:12:06 PAGE 3   

 117   4              }
 118   3            else if((time2[0]%2 == 1)&&flash_bit)
 119   3              {
 120   4                seg_bit[flash_pos_bit [flash_pos]/10] = time2[flash_pos]/10;
 121   4                seg_bit[flash_pos_bit [flash_pos]%10] = time2[flash_pos]%10;
 122   4              }
 123   3          }
 124   2          break;
 125   2          case 2:
 126   2          {
 127   3            seg_bit[0] = 20;
 128   3            seg_bit[1] = 20;
 129   3            seg_bit[2] = 20;
 130   3            seg_bit[3] = 20;
 131   3            seg_bit[4] = 20;
 132   3            seg_bit[5] = temp_val/100000;
 133   3            seg_bit[6] = temp_val%100000/10000;
 134   3            seg_bit[7] = 22;
 135   3          }
 136   2          break;
 137   2          case 3:
 138   2          {
 139   3            seg_bit[0] = time3[2]/10;
 140   3            seg_bit[1] = time3[2]%10;
 141   3            seg_bit[2] = 21;
 142   3            seg_bit[3] = time3[1]/10;
 143   3            seg_bit[4] = time3[1]%10;
 144   3            seg_bit[5] = 21;
 145   3            seg_bit[6] = time3[0]/10;
 146   3            seg_bit[7] = time3[0]%10;
 147   3            if((time2[0]%2 == 0)&&flash_bit)
 148   3              {
 149   4                seg_bit[flash_pos_bit [flash_pos]/10] = 20;
 150   4                seg_bit[flash_pos_bit [flash_pos]%10] = 20;
 151   4              }
 152   3            else if((time2[0]%2 == 1)&&flash_bit)
 153   3              {
 154   4                seg_bit[flash_pos_bit [flash_pos]/10] = time3[flash_pos]/10;
 155   4                seg_bit[flash_pos_bit [flash_pos]%10] = time3[flash_pos]%10;
 156   4              }
 157   3          }
 158   2          break;
 159   2        }
 160   1      }
 161          
 162          //flash_pos 2-时 1-分 0-秒  flash_bit 1-设置 0-显示
 163          void key_tast()
 164          {
 165   1        if(key_val == 7)
 166   1        {
 167   2          key_val = 0;
 168   2          if(flash_pos == 2) 
 169   2          {
 170   3            flash_pos = 1;
 171   3            if(flash_bit == 0) {flash_bit = 1;flash_pos = 2;}
 172   3          } 
 173   2          else if (flash_pos == 1) {flash_pos = 0;}
 174   2          else if (flash_pos == 0) 
 175   2          {
 176   3            flash_pos = 2;
 177   3            if(flash_bit == 1){flash_bit = 0;}
 178   3            else flash_bit = 1;
C51 COMPILER V9.60.0.0   MAIN                                                              03/16/2025 14:12:06 PAGE 4   

 179   3          }
 180   2        }
 181   1        if(key_val == 6)
 182   1        {
 183   2          key_val = 0;
 184   2          flash_pos = 0;
 185   2          flash_bit = 0;
 186   2          if(show_state == 1) {show_state = 3;}
 187   2          else if (show_state == 3) {show_state = 1;}
 188   2        }
 189   1        if(key_val == 5) // 增加
 190   1        {
 191   2          key_val = 0;
 192   2          if((show_state == 1)&&(flash_bit == 1)) // 时钟
 193   2          {
 194   3            time2[flash_pos]++;
 195   3            if(time2[0] > 59) time2[0] = 0;
 196   3            if(time2[1] > 59) time2[1] = 0;
 197   3            if(time2[2] > 23) time2[2] = 0;
 198   3            time_init();
 199   3          }
 200   2          else if((show_state == 3)&&(flash_bit == 1)) // 闹钟
 201   2          {
 202   3            time3[flash_pos]++;
 203   3            if(time3[0] > 59) time3[0] = 0;
 204   3            if(time3[1] > 59) time3[1] = 0;
 205   3            if(time3[2] > 23) time3[2] = 0;
 206   3            
 207   3          }
 208   2        }
 209   1        if(key_val == 4) // 减少
 210   1        {
 211   2          key_val = 0;
 212   2          if((show_state == 1)&&(flash_bit == 1)) // 时钟
 213   2          {
 214   3            time2[flash_pos]--;
 215   3            if(time2[0] < 0) time2[0] = 59;
 216   3            if(time2[1] < 0) time2[1] = 59;
 217   3            if(time2[2] < 0) time2[2] = 23;
 218   3            time_init();
 219   3          }
 220   2          else if((show_state == 3)&&(flash_bit == 1)) // 闹钟
 221   2          {
 222   3            time3[flash_pos]--;
 223   3            if(time3[0] < 0) time3[0] = 59;
 224   3            if(time3[1] < 0) time3[1] = 59;
 225   3            if(time3[2] < 0) time3[2] = 23;
 226   3          }
 227   2        }
 228   1        
 229   1      }
 230          
 231          void key_scan()
 232          {
 233   1        switch(keystate)
 234   1        {
 235   2          case key_check:
 236   2          {
 237   3            if((P30 == 0)||(P31 == 0)||(P32 == 0)||(P33 == 0)) keystate = key_press;
 238   3          }
 239   2          break;
 240   2          case key_press:
C51 COMPILER V9.60.0.0   MAIN                                                              03/16/2025 14:12:06 PAGE 5   

 241   2          {
 242   3            if(P30 == 0) key_val = 7;
 243   3            if(P31 == 0) key_val = 6;
 244   3            if(P32 == 0) key_val = 5;
 245   3            if(P33 == 0) key_val = 4;
 246   3            keystate = key_release;
 247   3          }
 248   2          break;
 249   2          case key_release:
 250   2          {
 251   3            if((P30 == 0)||(P31 == 0)||(P32 == 0)||(P33 == 0))
 252   3            {
 253   4              key_time+=10;
 254   4              if((show_state == 1)&&(key_val == 4)&&(flash_bit == 0))
 255   4              {
 256   5                show_state = 2;
 257   5              }
 258   4            }
 259   3            else 
 260   3            {
 261   4              keystate = key_check;
 262   4              key_flag = 1;
 263   4              if((show_state == 2)&&(key_val == 4)&&(flash_bit == 0))
 264   4              {
 265   5                show_state = 1;
 266   5              }
 267   4            }
 268   3          }
 269   2          break;
 270   2        }
 271   1      }
 272          
 273          void Timer1_Init(void)    //10微秒@11.0592MHz
 274          {
 275   1        AUXR |= 0x40;     //定时器时钟1T模式
 276   1        TMOD &= 0x0F;     //设置定时器模式
 277   1        TL1 = 0x91;       //设置定时初始值
 278   1        TH1 = 0xFF;       //设置定时初始值
 279   1        TF1 = 0;        //清除TF1标志
 280   1        TR1 = 1;        //定时器1开始计时
 281   1        EA = 1;
 282   1        ET1 = 1;
 283   1      }
 284          
 285          
 286          void time0 () interrupt 1
 287          {
 288   1        P0 = 0X00;
 289   1        P2|=0XC0;P2&=0XDF;
 290   1        P2&=0X1F;
 291   1        P0 = seg_num[seg_bit[num]];
 292   1        P2|=0XE0;
 293   1        P2&=0X1F;
 294   1        P0 = _crol_(0x01,num);
 295   1        P2|=0XC0;P2&=0XDF;
 296   1        P2&=0X1F;
 297   1        if(++num == 8) num=0;
 298   1        
 299   1        clock_tast();
 300   1      }
 301          
 302          void Timer0_Init(void)    //1毫秒@11.0592MHz
C51 COMPILER V9.60.0.0   MAIN                                                              03/16/2025 14:12:06 PAGE 6   

 303          {
 304   1        AUXR |= 0x80;     //定时器时钟1T模式
 305   1        TMOD &= 0xF0;     //设置定时器模式
 306   1        TL0 = 0xCD;       //设置定时初始值
 307   1        TH0 = 0xD4;       //设置定时初始值
 308   1        TF0 = 0;        //清除TF0标志
 309   1        TR0 = 1;        //定时器0开始计时
 310   1        EA = 1;
 311   1        ET0 = 1;
 312   1      }
 313          
 314          
 315          void all_init()
 316          {
 317   1        P0 = 0XFF;
 318   1        P2|=0X80;P2&=0X9F;
 319   1        P2&=0X1F; //流水灯
 320   1        P0 = 0XFF;
 321   1        P2|=0XE0;
 322   1        P2&=0X1F; //段选端
 323   1        P0 = 0X00;
 324   1        P2|=0XC0;P2&=0XDF;
 325   1        P2&=0X1F; //位
 326   1        P0 = 0X00;
 327   1        P2|=0XA0;P2&=0XBF;
 328   1        P2&=0X1F; // 蜂鸣器继电器
 329   1      }
 330          
 331          void delay_ms(uint ms)
 332          {
 333   1        uint i,j;
 334   1        for(i=0;i<ms;i++)
 335   1          for(j=0;j<853;j++);
 336   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1991    ----
   CONSTANT SIZE    =     46    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     61    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     10    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
